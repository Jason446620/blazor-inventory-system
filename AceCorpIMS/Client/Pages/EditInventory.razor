@page "/inventory"
@page "/inventory/{InventoryId:int}"
@using AceCorpIMS.Client.Models;

@inject NavigationManager NavigationManager

<PageTitle>@title</PageTitle>
<h1>Office Equipment Inventory</h1>
<h3>@title</h3>

<!-- validation check for inventory -->
@if (inventory is null)
{
    <p><em>Loading...</em></p>
}
else
{
// creates the form where the data will display in the table
<div class="row">
    <div class="col-sm-4">
        <EditForm Model="@inventory" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <label for="inventoryName" class="form-label">Inventory Name:</label>
                <InputText id="inventoryName" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
            </div>
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label>
                <InputNumber id="quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
            </div>
            <div class="mb-3">
                <label for="Price" class="form-label">Price:</label>
                <InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
            </div>
            <div class="mb-3">
                <label for="dateReceived" class="form-label">Date Received:</label>
                <InputDate id="dateReceived" @bind-Value="inventory.DateReceived" class="form-control"></InputDate>
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
        </EditForm>
    </div>
</div>
}

@code {
    // constructors for inventory and it's id field
    [Parameter]
    public int? InventoryId { get; set; }

    private Inventory? inventory;

    // constructor for the title
    private string title = string.Empty;

    // sets the parameters for the table
    protected override void OnParametersSet()
    {
        // validation for getting the inventory
        if (InventoryId is not null)
        {
            Inventory foundInventory = InventoryClient.GetInventory(InventoryId.Value);
            inventory = new()
                {
                    InventoryId = foundInventory.InventoryId,
                    InventoryName = foundInventory.InventoryName,
                    Quantity = foundInventory.Quantity,
                    Price = foundInventory.Price,
                    DateReceived = foundInventory.DateReceived
                };

            title = $"Edit {inventory.InventoryName}";
        }
        else
        {
            inventory = new()
            {
                InventoryName = string.Empty,
                Quantity = 0,
                DateReceived = DateTime.UtcNow
            };

            title = "Add Inventory";
        }
    }

    // handles the submission for editing the inventory
    private void HandleSubmit()
    {
        if (inventory!.InventoryId == 0) 
        { 
            InventoryClient.AddInventory(inventory);
        }
        else
        {
            InventoryClient.UpdateInventory(inventory);
        }

        NavigationManager.NavigateTo("/");
    }

    // establishes cancel function that returns the user to the main page
    private void Cancel()
    {
       NavigationManager.NavigateTo("/");
    }

}
